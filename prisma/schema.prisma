// Prisma schema for Stock Trading App

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  portfolios Portfolio[]
  sessions   UserSession[]

  @@map("users")
}

model Portfolio {
  id           Int     @id @default(autoincrement())
  userId       Int     @map("user_id")
  name         String  @default("Main Portfolio")
  initialValue Decimal @default(10000.00) @map("initial_value") @db.Decimal(15, 2)
  cashBalance  Decimal @default(10000.00) @map("cash_balance") @db.Decimal(15, 2)
  totalValue   Decimal @default(10000.00) @map("total_value") @db.Decimal(15, 2)
  isActive     Boolean @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings     Holding[]
  transactions Transaction[]

  @@map("portfolios")
}

model Holding {
  id                Int      @id @default(autoincrement())
  portfolioId       Int      @map("portfolio_id")
  symbol            String   @db.VarChar(10)
  quantity          Decimal  @db.Decimal(18, 8)
  averagePrice      Decimal  @map("average_price") @db.Decimal(15, 4)
  currentPrice      Decimal? @default(0) @map("current_price") @db.Decimal(15, 4)
  totalValue        Decimal? @default(0) @map("total_value") @db.Decimal(15, 2)
  profitLoss        Decimal? @default(0) @map("profit_loss") @db.Decimal(15, 2)
  profitLossPercent Decimal? @default(0) @map("profit_loss_percent") @db.Decimal(8, 4)
  lastUpdated       DateTime @default(now()) @updatedAt @map("last_updated")
  createdAt         DateTime @default(now()) @map("created_at")

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol], name: "unique_portfolio_symbol")
  @@map("holdings")
}

model Transaction {
  id                String      @id @map("transaction_id") @db.VarChar(100)
  portfolioId       Int         @map("portfolio_id")
  symbol            String      @db.VarChar(10)
  type              TradeType
  quantity          Decimal     @db.Decimal(18, 8)
  price             Decimal     @db.Decimal(15, 4)
  totalAmount       Decimal     @map("total_amount") @db.Decimal(15, 2)
  aiRecommendation  Json?       @map("ai_recommendation")
  transactionDate   DateTime    @default(now()) @map("transaction_date")
  createdAt         DateTime    @default(now()) @map("created_at")

  // Relations
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model AIRecommendation {
  id             Int                @id @default(autoincrement())
  symbol         String             @db.VarChar(10)
  name           String?
  action         RecommendationAction
  confidence     Decimal            @db.Decimal(5, 2)
  currentPrice   Decimal?           @map("current_price") @db.Decimal(15, 4)
  targetPrice    Decimal?           @map("target_price") @db.Decimal(15, 4)
  expectedReturn Decimal?           @map("expected_return") @db.Decimal(8, 4)
  reasoning      String?            @db.Text
  riskLevel      RiskLevel?         @map("risk_level")
  timeframe      TimeframeType?
  keyFactors     Json?              @map("key_factors")
  marketData     Json?              @map("market_data")
  generatedAt    DateTime           @default(now()) @map("generated_at")
  expiresAt      DateTime?          @map("expires_at")

  @@map("ai_recommendations")
}

model UserSession {
  id           String   @id
  userId       Int      @map("user_id")
  expiresAt    DateTime @map("expires_at")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Enums
enum TradeType {
  BUY
  SELL
}

enum RecommendationAction {
  BUY
  SELL
  HOLD
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum TimeframeType {
  SHORT
  MEDIUM
  LONG
}